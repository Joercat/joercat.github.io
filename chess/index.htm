
<!DOCTYPE html>
<html>
<head>
    <title>Chess 1v1 Local</title>
    <link rel="stylesheet" href="https://unpkg.com/@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.css">
    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }

        .game-info {
            text-align: center;
            width: 100%;
            margin-bottom: 20px;
        }

        .board-container {
            display: flex;
            gap: 20px;
        }

        #board {
            width: 600px;
        }

        .side-panel {
            width: 200px;
            padding: 20px;
            background: #f5f5f5;
            border-radius: 8px;
        }

        .captured-pieces {
            margin: 10px 0;
            min-height: 50px;
        }

        .captured-pieces img {
            width: 30px;
            height: 30px;
        }

        #moveHistory {
            height: 300px;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 10px;
            margin-top: 10px;
        }

        button {
            padding: 10px;
            margin: 10px;
            font-size: 16px;
        }

        #status {
            font-size: 18px;
            font-weight: bold;
            margin-top: 10px;
        }

        .move-row {
            display: flex;
            margin: 5px 0;
        }

        .move-number {
            width: 30px;
        }

        .move {
            flex: 1;
            padding: 0 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="game-info">
            <h1>Chess 1v1 Local</h1>
            <button id="newGame">New Game</button>
            <p id="status"></p>
        </div>
        <div class="board-container">
            <div class="side-panel">
                <h3>Captured White Pieces</h3>
                <div id="capturedBlack" class="captured-pieces"></div>
                <h3>Move History</h3>
                <div id="moveHistory"></div>
            </div>
            <div id="board"></div>
            <div class="side-panel">
                <h3>Captured Black Pieces</h3>
                <div id="capturedWhite" class="captured-pieces"></div>
            </div>
        </div>
    </div>

    <audio id="moveSound" src="data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjI5LjEwMAAAAAAAAAAAAAAA//tQwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAADAAAGhgBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr///////////////////////////////////////////8AAAAATGF2YzU4LjU0AAAAAAAAAAAAAAAAJAAAAAAAAAAAAoZxhxX2AAAAAAAAAAAAAAAAAAAA//tQxAAACVDlIgQwYgEjmWc/PCAAAFBHAAAAAAA0kBIAAAEkAAAAACEkBIAAAEkAAAAACQAAP/qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr/+xDE1gPAAAGkAAAAIAAANIAAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg==" preload="auto"></audio>
    <audio id="captureSound" src="data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjI5LjEwMAAAAAAAAAAAAAAA//tQwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAADAAAGhgBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr///////////////////////////////////////////8AAAAATGF2YzU4LjU0AAAAAAAAAAAAAAAAJAAAAAAAAAAAAoZxhxX2AAAAAAAAAAAAAAAAAAAA//tQxAAACZjpQgQwYgEvnSn/PCAAAPgnAAAAAAAA0kAIAAAEkAAAAABpIAQAAAJIAAAAABIAAH/6qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7EMTWg8AAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq" preload="auto"></audio>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://unpkg.com/@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.min.js"></script>
    <script>
let board = null;
let game = new Chess();
let moveHistory = [];
let capturedPieces = { w: [], b: [] };

function playSound(type) {
    const sound = document.getElementById(type === 'capture' ? 'captureSound' : 'moveSound');
    sound.currentTime = 0;
    sound.play();
}

function showPromotionDialog(color, callback) {
    const pieces = ['q', 'r', 'n', 'b'];
    const dialog = document.createElement('div');
    dialog.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border: 2px solid black; z-index: 1000;';
    
    pieces.forEach(piece => {
        const img = document.createElement('img');
        img.src = `https://chessboardjs.com/img/chesspieces/wikipedia/${color}${piece.toUpperCase()}.png`;
        img.style.width = '60px';
        img.style.cursor = 'pointer';
        img.style.margin = '5px';
        img.onclick = () => {
            document.body.removeChild(dialog);
            callback(piece);
        };
        dialog.appendChild(img);
    });
    
    document.body.appendChild(dialog);
}

function updateCapturedPieces() {
    const positions = game.board();
    const currentPieces = { w: {}, b: {} };
    
    'prnbqk'.split('').forEach(piece => {
        currentPieces.w[piece] = 0;
        currentPieces.b[piece] = 0;
    });
    
    positions.forEach(row => {
        row.forEach(piece => {
            if (piece) {
                currentPieces[piece.color][piece.type]++;
            }
        });
    });

    const initialCounts = {
        p: 8, r: 2, n: 2, b: 2, q: 1, k: 1
    };

    capturedPieces = { w: [], b: [] };

    ['w', 'b'].forEach(color => {
        Object.entries(initialCounts).forEach(([piece, count]) => {
            const captured = count - currentPieces[color][piece];
            for (let i = 0; i < captured; i++) {
                capturedPieces[color].push(piece);
            }
        });
    });

    $('#capturedWhite').html(capturedPieces.w.map(p => 
        `<img src="https://chessboardjs.com/img/chesspieces/wikipedia/w${p.toUpperCase()}.png" width="30" height="30">`
    ).join(''));
    $('#capturedBlack').html(capturedPieces.b.map(p => 
        `<img src="https://chessboardjs.com/img/chesspieces/wikipedia/b${p.toUpperCase()}.png" width="30" height="30">`
    ).join(''));
}

function updateMoveHistory(move) {
    moveHistory.push(move);
    const moveHistoryDiv = $('#moveHistory');
    let html = '';
    
    for (let i = 0; i < moveHistory.length; i += 2) {
        html += `<div class="move-row">
            <span class="move-number">${Math.floor(i/2) + 1}.</span>
            <span class="move">${moveHistory[i]}</span>
            <span class="move">${moveHistory[i+1] || ''}</span>
        </div>`;
    }
    
    moveHistoryDiv.html(html);
    moveHistoryDiv.scrollTop(moveHistoryDiv[0].scrollHeight);
}

function onDragStart(source, piece) {
    if (game.game_over()) return false;
    
    // Allow piece movement only for the current player's turn
    if ((game.turn() === 'w' && piece.search(/^b/) !== -1) ||
        (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
        return false;
    }
    
    // Check if the piece at source has legal moves
    const moves = game.moves({ square: source, verbose: true });
    return moves.length > 0;
}

function onDrop(source, target) {
    const piece = game.get(source);
    
    // Handle pawn promotion
    const isPawnPromotion = piece && piece.type === 'p' && 
                           ((piece.color === 'w' && target[1] === '8') || 
                            (piece.color === 'b' && target[1] === '1'));

    if (isPawnPromotion) {
        showPromotionDialog(piece.color, function(promotionPiece) {
            makeMove(source, target, promotionPiece);
        });
        return;
    }

    return makeMove(source, target);
}

function makeMove(source, target, promotion) {
    const moveConfig = {
        from: source,
        to: target,
        promotion: promotion
    };

    const move = game.move(moveConfig);

    if (move === null) return 'snapback';

    // Update the board position
    board.position(game.fen(), false);

    // Play appropriate sound
    const isCapture = move.captured !== undefined;
    playSound(isCapture ? 'capture' : 'move');

    // Update game state
    updateStatus();
    updateCapturedPieces();
    updateMoveHistory(game.history()[game.history().length - 1]);
}

function updateStatus() {
    let status = '';
    
    if (game.in_checkmate()) {
        status = game.turn() === 'w' ? 'Game Over - Black Wins!' : 'Game Over - White Wins!';
    } else if (game.in_draw()) {
        status = 'Game Over - Draw!';
    } else {
        status = game.turn() === 'w' ? 'White to move' : 'Black to move';
        if (game.in_check()) {
            status += ' - CHECK!';
        }
    }
    
    $('#status').text(status);
}

function initGame() {
    game = new Chess();
    moveHistory = [];
    capturedPieces = { w: [], b: [] };
    
    board = Chessboard('board', {
        draggable: true,
        position: 'start',
        onDragStart: onDragStart,
        onDrop: onDrop,
        pieceTheme: 'https://chessboardjs.com/img/chesspieces/wikipedia/{piece}.png'
    });
    
    updateStatus();
    updateCapturedPieces();
    $('#moveHistory').empty();
}

$(document).ready(function() {
    initGame();
    
    $('#newGame').click(function() {
        initGame();
    });
});
    </script>
</body>
</html>
